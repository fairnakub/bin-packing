"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var split_strategies_1 = require("./split-strategies");
exports.SplitStrategy = split_strategies_1.SplitStrategy;
var selection_strategies_1 = require("./selection-strategies");
exports.SelectionStrategy = selection_strategies_1.SelectionStrategy;
var sort_strategies_1 = require("./sort-strategies");
exports.SortStrategy = sort_strategies_1.SortStrategy;
var debug_1 = __importDefault(require("debug"));
var debug = debug_1.default('guillotine-packer');
var pack_strategy_1 = require("./pack-strategy");
var util_1 = require("./util");
function Packer(_a, _b) {
    var binHeight = _a.binHeight, binWidth = _a.binWidth, items = _a.items;
    var _c = _b === void 0 ? {} : _b, selectionStrategy = _c.selectionStrategy, splitStrategy = _c.splitStrategy, sortStrategy = _c.sortStrategy, _d = _c.kerfSize, kerfSize = _d === void 0 ? 0 : _d, _e = _c.allowRotation, allowRotation = _e === void 0 ? true : _e;
    function enumToArray(enumVariable) {
        return Object.values(enumVariable)
            .filter(function (value) { return parseInt(value, 10) >= 0; })
            .map(function (value) { return value; });
    }
    var selectionStrategies = selectionStrategy !== undefined ? [selectionStrategy] : enumToArray(selection_strategies_1.SelectionStrategy);
    var splitStrategies = splitStrategy !== undefined ? [splitStrategy] : enumToArray(split_strategies_1.SplitStrategy);
    var sortStrategies = sortStrategy !== undefined ? [sortStrategy] : enumToArray(sort_strategies_1.SortStrategy);
    var allStrategies = util_1.cartesian(selectionStrategies, splitStrategies, sortStrategies, [
        sort_strategies_1.SortDirection.ASC,
        sort_strategies_1.SortDirection.DESC
    ]);
    return allStrategies
        .map(function (_a) {
        var selectionStrategy = _a[0], splitStrategy = _a[1], sortStrategy = _a[2], sortOrder = _a[3];
        return pack_strategy_1.PackStrategy({
            binWidth: binWidth,
            binHeight: binHeight,
            items: items,
            splitStrategy: splitStrategy,
            selectionStrategy: selectionStrategy,
            sortStrategy: sortStrategy,
            sortOrder: sortOrder,
            kerfSize: kerfSize,
            allowRotation: allowRotation
        });
    })
        .reduce(function (bestCompressed, packResult) {
        var splitStrategy = packResult.splitStrategy, sortStrategy = packResult.sortStrategy, selectionStrategy = packResult.selectionStrategy, sortOrder = packResult.sortOrder, packedItems = packResult.packedItems;
        debug("Result for split strategy: " + splitStrategy + ", selection strategy: " + selectionStrategy + ", sortStrategy: " + sortStrategy + ", sortOrder: " + sortOrder + " - " + packedItems.length + " bin(s)");
        if (!bestCompressed || packedItems.length < bestCompressed.length) {
            return packedItems;
        }
        else {
            return bestCompressed;
        }
    }, null);
}
exports.packer = Packer;
//# sourceMappingURL=guillotine-packer.js.map