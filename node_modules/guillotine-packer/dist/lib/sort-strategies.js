"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var area = function (item) { return item.height * item.width; };
var perimeter = function (item) { return item.height * 2 + item.width * 2; };
var sides = function (item) { return ({
    short: Math.min(item.width, item.height),
    long: Math.max(item.width, item.height)
}); };
var Sorter = /** @class */ (function () {
    function Sorter(direction) {
        this.direction = direction;
    }
    Sorter.prototype.sort = function (items) {
        var sortedItems = __spreadArrays(items).sort(this.comparer);
        return this.direction === SortDirection.DESC ? sortedItems.reverse() : sortedItems;
    };
    return Sorter;
}());
var Area = /** @class */ (function (_super) {
    __extends(Area, _super);
    function Area() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Area.prototype.comparer = function (a, b) {
        return area(a) < area(b) ? -1 : 1;
    };
    return Area;
}(Sorter));
var ShortSide = /** @class */ (function (_super) {
    __extends(ShortSide, _super);
    function ShortSide() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShortSide.prototype.comparer = function (a, b) {
        var aSides = sides(a);
        var bSides = sides(b);
        if (aSides.short === bSides.short) {
            return aSides.long < bSides.long ? -1 : 1;
        }
        else {
            return aSides.short < bSides.short ? -1 : 1;
        }
    };
    return ShortSide;
}(Sorter));
var LongSide = /** @class */ (function (_super) {
    __extends(LongSide, _super);
    function LongSide() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LongSide.prototype.comparer = function (a, b) {
        var aSides = sides(a);
        var bSides = sides(b);
        if (aSides.long === bSides.long) {
            return aSides.short < bSides.short ? -1 : 1;
        }
        else {
            return aSides.long < bSides.long ? -1 : 1;
        }
    };
    return LongSide;
}(Sorter));
var Perimeter = /** @class */ (function (_super) {
    __extends(Perimeter, _super);
    function Perimeter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Perimeter.prototype.comparer = function (a, b) {
        return perimeter(a) < perimeter(b) ? -1 : 1;
    };
    return Perimeter;
}(Sorter));
var Differences = /** @class */ (function (_super) {
    __extends(Differences, _super);
    function Differences() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Differences.prototype.comparer = function (a, b) {
        return Math.abs(a.width - a.height) < Math.abs(b.width - b.height) ? -1 : 1;
    };
    return Differences;
}(Sorter));
var Ratio = /** @class */ (function (_super) {
    __extends(Ratio, _super);
    function Ratio() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ratio.prototype.comparer = function (a, b) {
        return a.width / a.height < b.width / b.height ? -1 : 1;
    };
    return Ratio;
}(Sorter));
var SortStrategy;
(function (SortStrategy) {
    SortStrategy[SortStrategy["Area"] = 0] = "Area";
    SortStrategy[SortStrategy["ShortSide"] = 1] = "ShortSide";
    SortStrategy[SortStrategy["LongSide"] = 2] = "LongSide";
    SortStrategy[SortStrategy["Perimeter"] = 3] = "Perimeter";
    SortStrategy[SortStrategy["Differences"] = 4] = "Differences";
    SortStrategy[SortStrategy["Ratio"] = 5] = "Ratio";
})(SortStrategy = exports.SortStrategy || (exports.SortStrategy = {}));
var SortDirection;
(function (SortDirection) {
    SortDirection[SortDirection["ASC"] = 0] = "ASC";
    SortDirection[SortDirection["DESC"] = 1] = "DESC";
})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
function GetSortImplementation(strategy, direction) {
    var impl;
    switch (strategy) {
        case SortStrategy.Area:
            impl = Area;
            break;
        case SortStrategy.Differences:
            impl = Differences;
            break;
        case SortStrategy.LongSide:
            impl = LongSide;
            break;
        case SortStrategy.Perimeter:
            impl = Perimeter;
            break;
        case SortStrategy.Ratio:
            impl = Ratio;
            break;
        case SortStrategy.ShortSide:
            impl = ShortSide;
            break;
    }
    return new impl(direction);
}
exports.GetSortImplementation = GetSortImplementation;
//# sourceMappingURL=sort-strategies.js.map